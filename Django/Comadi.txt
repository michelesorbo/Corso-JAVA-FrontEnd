1) Creare la virtualEnv
python3 -m venv <nome_della_venv> (molti usano mettere un . prima della cartella)

2) Attivare la virtualEnv (rif: https://docs.python.org/3/library/venv.html)
MAC-Linux -> source <nome_della_venv>\bin\activate
WINDOWS-> <nome_della_venv>\Scripts\activate.bat (cmd)*
WINDOWS-> <nome_della_venv>\Scripts\Activate.ps1 (PowerShel)
-verificare che sia attiva. All'inzio del prompt ci deve essere (nome_della_venv)
-Per disattvare la virtualEnv scrivere deactivate, da lanciare alla fine dello sviluppo

DOPO I PRIMI 2 PUNTI posso installare la libreria django

3 opzionale) Per visualizzare le librerie Python installate nella virtualEnv scrivere -> pip list

4) Installo la libreria django 
comando-> pip install django

5) Creare un progeto Django:
Dopo aver installato la libreria Django nella virtualEnv lanciare il comando -> django-admin startproject <nome_del_progetto>

6) Controllare il Progetto
Una volta finita l'installazione del Progetto andare nella cartella del progetto e lanciare il comando
->python manage.py runserver
rif: https://docs.djangoproject.com/en/4.2/intro/tutorial01/


--------------COMANDI DJANGO--------------

- Creare un app
Django funziona ad app. Un app può gestire una parte del sito o tutto il sito.
Per creare un app -> python manage.py startapp <nome_app>
Dopo che abbiamo creato l'app bisogna dire a Django che esiste quell'app.
Andare in settings e aggiungere alla lista INSTALLED_APPS il nome dell'applicazione appena creata


Per gestire gli URL del sito:
Andare nel file urls del mainSite e collegare la pagina urls del'app tramite il metodo include, ricordati di creare
il file urls.py nella cartella dell'app

Nel file urls appena creato nella cartella dell'app inserire i comandi base per creare una urlpatterns

Nel file urls dell'app creare le url che ci interessano e collegarle ai relativi metodi presenti 
nel file views. Ricordati di collegare il file view nel file urls con "from . import view"


------ Gestione die Templates --------
Prima di tutto devo creare una cartella "templates" dentro la cartella dell'app
Dopo averla creata possiamo inserire al suo interno le pagine HTML

per visualizzare una pagina HTML usare il metodo "render" nel file views 
il metodo rendere-> rendere(request, 'pagina HTML presente nel templates') IL PRIMO PARAMETRO è SEMPRE request IL SECONDO è sempre la pagina HTML


Quando creo una nuova pagina HTML
1) Creare la base della pagina in HTML
2) Creare il medoto per visualizzare la pagina nel file views
3) Creare il path nel file urls dell'app


Per poter creare un link alla pagina posso aggiungere al path del file urls il parametro nome
Nel file HTML ad href collego la pagina con {% url 'nome_dato_in_name_di_path' %}

---- Passare parametri da un metodo ad una pagina HTML -------
Nel metodo in view creare tutta la logica e inviare tramite la funzione render le varibili come terzo parametro 
di rendere. Per inviare più parametri ricodati di usare un dizionario
es: return render(request,'mome:pagina.html'.{parametri da passare})

Per modificare l aporta di default del runserver usare il comando -> python manage.py runserver <numero_di_porta>
Se vuoi rendere permanente la modifica della porta di defaul del runserver andare in manage.py e nel metodo mainSite
inerire il seguente codice: 
from 
django.core.management.commands.runserver import Command as runserver
runserver.default_port = "8005"

---Pagina ADMIN-------
Per abilitare la pagina admin fare prima le migration -> python manage.py migrate
Per creare un SuperAdmin (Primo utente del sito) lanciare il comando ->python manage.py createsuperuser


----Creare Tabelle nel DB ------
Per crea tabelle nel DB devo andare nel file model.py dell'application.
Ogni application crea le tabelle che servono per gestire le informazioni dell'application

Una volta settati i campi della tabella in models.py, dobbiamo dire a Django di aggiungere
la tabella nel DB 
->python manage.py makemigrations #Serve a preparare le query da passare al DB
DOPO IL makemigration
->python manage.py migrate

Per visualizzare la tabella creata nell'area admin, apro il file admin.py dell'app e inserisco:
importo la tabella creata in models
from .models import <nome_della_calsse>

admin.site.register(<nome_della_classe>)


------------
Creare un elenco di corsi che hanno i seguenti campi
titolo = Titolo del corso 
descrizione_breve = piccola introduzione al corso
contenuto = contenuto del corso
inizio = data inizio
durata = durata in ore
docente = prendere da User
costo = prezzo 

Nella pagina corsi devo visualizzare solo il titolo del corso e la descrizione breve.
Quando seleziono un corso si aprirà la pagina di dettaglio corso con tutte le informazioni.

Cose da Fare.

1) Creo in model il modello della tabella corsi
2) andare a fare le migration
3)Aggiungere la tabella nell'amministratore
per rislvere il nome plurale della tabella in admin (togliere la s finale)
creare una classe Meta dentro la classe della tabelle e inserire verbose_name_plural = <nome_della_tabella_plurale>